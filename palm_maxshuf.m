function maxb = palm_maxshuf(Ptree,stype)
% Computes the maximum number of possible permutations given
% a tree that specifies the depencence between the observations.
%
% Usage:
% maxs = palm_maxshuf(Ptree,ptype)
% 
% - Ptree : Permutation tree, generated by palm_tree.
% - stype : Shuffling type to count. It can be one of:
%           - 'perms' for permutations.
%           - 'flips' for sign-flips
%           - 'both' for permutations with sign-flips.
% - maxb  : Maximum number of possible shufflings.
%
% _____________________________________
% Anderson M. Winkler
% FMRIB / University of Oxford
% Oct/2013
% http://brainder.org

switch lower(stype),
    case 'perms',
        maxb = maxpermnode(Ptree,1);
    case 'flips',
        maxb = maxflipnode(Ptree,1);
    case 'both',
        maxp = maxpermnode(Ptree,1);
        maxs = maxflipnode(Ptree,1);
        maxb = maxp*maxs;
end

% ==============================================================
function np = maxpermnode(Ptree,np)
% Number of permutations per node, recursive and
% incremental.
for u = 1:size(Ptree,1),
    np = np * seq2np(Ptree{u,1});
    if size(Ptree,2) > 1 && ~isnan(Ptree{u,2}(2)),
        np = maxpermnode(Ptree{u,3},np);
    end
end

% ==============================================================
function np = seq2np(S)
% Takes a sequence of integers and computes the 
% number of possible permutations.
U   = unique(S);
nU  = numel(U);
cnt = zeros(size(U));
for u = 1:nU,
    cnt(u) = sum(S == U(u));
end
np = factorial(numel(S))/prod(factorial(cnt));

% ==============================================================
function ns = maxflipnode(Ptree,ns)
% Number of sign-flips per node, recursive and
% incremental.
for u = 1:size(Ptree,1),
    if isnan(Ptree{u,1}),
        % If this is NaN, this means it's within-block permutation
        % (negative indices in the block definitions), so go deeper
        % to see what are the possible sign-flips there. There is
        % no need to count the flips at this level, because they will
        % be considered at the deeper levels.
        ns = maxflipnode(Ptree{u,3},ns);
    else
        % If not NaN, then it's whole-block permutation, and it
        % should not go any level further. The value that goes in
        % the exponent is the number of elements (branches) that
        % begin at this node, or the number of leaves (observations)
        % here if this is the last node.
        ns = ns * 2^length(Ptree{u,1});
    end
end
